@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<form method="get" onsubmit="return validateDateRange()">
    <p>
        Search Transactions: <input type="text" name="SearchString" value="@Model.SearchString" />
        Category:
        <select name="CategoryFilter" asp-for="CategoryFilter">
            <option value="">All</option>
            @if (Model.Categories != null)
            {
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Id" selected="@(category.Id == Model.CategoryFilter ? "selected" : null)">@category.Name</option>
                }
            }
        </select>
        Start Date: <input type="date" id="StartDate" name="StartDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
        End Date: <input type="date" id="EndDate" name="EndDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
        <input type="submit" value="Filter" />
        @if (!string.IsNullOrEmpty(Model.SearchString) || 
            Model.CategoryFilter.HasValue || 
            Model.StartDate.HasValue || 
            Model.EndDate.HasValue)
        {
            <a asp-page="./Index">Clear filters</a>
        }
    </p>
</form>

<table class="transactionsTable">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@(Model.SortOrder == "name_asc" ? "name_desc" : "name_asc")">
                    @Html.DisplayNameFor(model => model.Transactions[0].Name)
                    @if (Model.SortOrder == "name_asc")
                    {
                        <span>&#9650;</span>
                    }
                    else if (Model.SortOrder == "name_desc")
                    {
                        <span>&#9660;</span>
                    }
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@(Model.SortOrder == "category_asc" ? "category_desc" : "category_asc")">
                    @Html.DisplayNameFor(model => model.Transactions[0].Category)
                    @if (Model.SortOrder == "category_asc")
                    {
                        <span>&#9650;</span>
                    }
                    else if (Model.SortOrder == "category_desc")
                    {
                        <span>&#9660;</span>
                    }
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@(Model.SortOrder == "amount_asc" ? "amount_desc" : "amount_asc")">
                    @Html.DisplayNameFor(model => model.Transactions[0].Amount)
                    @if (Model.SortOrder == "amount_asc")
                    {
                        <span>&#9650;</span>
                    }
                    else if (Model.SortOrder == "amount_desc")
                    {
                        <span>&#9660;</span>
                    }
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@(Model.SortOrder == "date_asc" ? "date_desc" : "date_asc")">
                    @Html.DisplayNameFor(model => model.Transactions[0].Date)
                    @if (Model.SortOrder == "date_asc")
                    {
                        <span>&#9650;</span>
                    }
                    else if (Model.SortOrder == "date_desc")
                    {
                        <span>&#9660;</span>
                    }
                </a>
            </th>
            <th>Actions</th>
    </thead>
    <tbody>
        @if (Model.Transactions == null || Model.Transactions.Count == 0)
        {
            <tr>
                <td colspan="4">No transactions found</td>
            </tr>
        }
        else
        {
            @foreach (var item in Model.Transactions)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td class="transaction-category-@item.CategoryId">
                    @if (item.Category != null)
                        {
                            @Html.DisplayFor(modelItem => item.Category.Name)
                        }
                        else
                        {
                            <span>No Category</span>
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Amount)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Date)
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" onclick="showEditForm(@item.Id)">Edit</button>
                        <button type="button" class="btn btn-primary" onclick="deleteTransaction(@item.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<a class="editCategoriesLink" onclick="showCategoriesTable()" style="display:inline">Edit Categories</a>
<a class="hideCategoriesLink" onclick="hideCategoriesTable()" style="display:none">Hide Categories</a>

<table class="categoriesTable" style="display:none">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index">@Html.DisplayNameFor(model => model.Categories[0].Name)</a>
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Categories == null || Model.Categories.Count == 0)
        {
            <tr>
                <td colspan="2">No categories found</td>
            </tr>
        }
        else
        {
            @foreach (var item in Model.Categories)
            {
                <tr>
                    <td onclick="editCategoryName(this, @item.Id)">
                        <span>@Html.DisplayFor(modelItem => item.Name)</span>
                        <input type="text" value="@item.Name" style="display:none;" onblur="saveCategoryName(this, @item.Id)" onkeydown="handleEnterKey(event, this, @item.Id)" />
                    </td>

                    <td>
                        <button type="button" class="btn btn-primary" onclick="deleteCategory(@item.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div id="addForm" style="display:block;" class="form-width-one-third">
    <form method="post">
        <input type="hidden" name="_method" value="POST" />
        <div class="form-group">
            <input type="hidden" asp-for="AddTransaction.Id" />
            <label asp-for="AddTransaction.Name"></label>
            <input asp-for="AddTransaction.Name" class="form-control" />
        </div>
        <div class="form-group">
            <input type="hidden" asp-for="AddTransaction.Id" />
            <label asp-for="AddTransaction.Category"></label>
            <select asp-for="AddTransaction.CategoryId" class="form-control" asp-items="Model.CategorySelectList" id="Add_Transaction_Category" onchange="handleCategoryChange(this, 'NewCategoryName_Add')">
                <option value="-2">Select the Category</option>
            </select>
            <input type="text" id="NewCategoryName_Add" name="NewCategoryName_Add" class="form-control" style="display:none;" placeholder="Enter new category name" />
        </div>
        <div class="form-group">
            <label asp-for="AddTransaction.Amount"></label>
            <input asp-for="AddTransaction.Amount" class="form-control" />
        </div>
        <div class="form-group">
            <label asp-for="AddTransaction.Date"></label>
            <input asp-for="AddTransaction.Date" class="form-control" type="date" />
        </div>
        <button type="submit" class="btn btn-primary">Add Transaction</button>
    </form>
</div>

<div id="editForm" style="display:none;" class="form-width-one-third">
    <form method="post">
        <input type="hidden" name="_method" value="PUT" />
        <input type="hidden" asp-for="EditTransaction.Id" id="Edit_Transaction_Id" />
        <div class="form-group">
            <label asp-for="EditTransaction.Name"></label>
            <input asp-for="EditTransaction.Name" class="form-control" id="Edit_Transaction_Name" />
        </div>
        <div class="form-group">
            <label asp-for="EditTransaction.Category"></label>
            <select asp-for="EditTransaction.CategoryId" class="form-control" asp-items="Model.CategorySelectList" id="Edit_Transaction_Category" onchange="handleCategoryChange(this, 'NewCategoryName_Edit')">
            </select>
            <input type="text" id="NewCategoryName_Edit" name="NewCategoryName_Edit" class="form-control" style="display:none;" placeholder="Enter new category name" />
        </div>
        <div class="form-group">
            <label asp-for="EditTransaction.Amount"></label>
            <input asp-for="EditTransaction.Amount" class="form-control" id="Edit_Transaction_Amount" />
        </div>
        <div class="form-group">
            <label asp-for="EditTransaction.Date"></label>
            <input asp-for="EditTransaction.Date" class="form-control" id="Edit_Transaction_Date" type="date" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="hideEditForm()">Cancel</button>
    </form>
</div>

@section Scripts {
    <script>
        function validateDateRange() {
            const startDate = document.getElementById('StartDate').value;
            const endDate = document.getElementById('EndDate').value;

            if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
                alert("Start Date cannot be after End Date.");
                return false;
            }

            return true;
        }

        async function showEditForm(id) {
            try {
                const response = await fetch(`/api/Transaction/${id}`);
                if (!response.ok) throw new Error("Transaction not found");

                const transaction = await response.json();
                if (!transaction || !transaction.id) throw new Error("Invalid transaction data");

                document.getElementById('Edit_Transaction_Id').value = transaction.id;
                document.getElementById('Edit_Transaction_Name').value = transaction.name;
                document.getElementById('Edit_Transaction_Category').value = transaction.categoryId;
                document.getElementById('Edit_Transaction_Amount').value = transaction.amount;
                document.getElementById('Edit_Transaction_Date').value = transaction.date;

                hideCategoriesTable();
                document.getElementById('editForm').style.display = 'block';
                document.getElementById('addForm').style.display = 'none';
            } catch (error) {
                console.error(error.message);
            }
        }

        async function deleteTransaction(id) {
            if (!confirm("Are you sure you want to delete this transaction?")) return;

            try {
                const response = await fetch(`/api/Transaction/${id}`, { method: 'DELETE' });
                if (!response.ok) throw new Error("Transaction not found");

                location.reload();
            } catch (error) {
                console.error(error.message);
            }
        }

        function hideEditForm() {
            document.getElementById('editForm').style.display = 'none';
            document.getElementById('addForm').style.display = 'block';
        }

        function handleCategoryChange(selectElement, elementId) {
            const newCategoryInput = document.getElementById(elementId);
            if (selectElement.value == -1) {
                newCategoryInput.style.display = 'block';
            } else {
                newCategoryInput.style.display = 'none';
            }
        }

        function showCategoriesTable() {
            document.querySelector('.categoriesTable').style.display = 'table';
            document.querySelector('.editCategoriesLink').style.display = 'none';
            document.querySelector('.hideCategoriesLink').style.display = 'inline';
            document.getElementById('editForm').style.display = 'none';
            document.getElementById('addForm').style.display = 'none';
        }

        function hideCategoriesTable() {
            document.querySelector('.categoriesTable').style.display = 'none';
            document.querySelector('.editCategoriesLink').style.display = 'inline';
            document.querySelector('.hideCategoriesLink').style.display = 'none';
            document.getElementById('editForm').style.display = 'none';
            document.getElementById('addForm').style.display = 'block';
        }

        function editCategoryName(td, categoryId) {
            const span = td.querySelector('span');
            const input = td.querySelector('input');
            span.style.display = 'none';
            input.style.display = 'block';
            input.focus();
        }

        async function saveCategoryName(input, categoryId) {
            const newName = input.value;
            try {
                const response = await fetch(`/api/Category/${categoryId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: newName })
                });
                if (!response.ok) throw new Error("Failed to update category");

                localStorage.setItem('showCategoriesTable', 'true');
                location.reload();
            } catch (error) {
                console.error(error.message);
            }
        }

        function handleEnterKey(event, input, categoryId) {
            if (event.key === 'Enter') {
                event.preventDefault();
                saveCategoryName(input, categoryId);
            }
        }

        async function deleteCategory(id) {
            if (!confirm("Are you sure you want to delete this category?")) return;

            try {
                const response = await fetch(`/api/Category/${id}`, { method: 'DELETE' });
                if (!response.ok) throw new Error("Category not found");

                localStorage.setItem('showCategoriesTable', 'true');
                location.reload();
            } catch (error) {
                console.error(error.message);
            }
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            if (localStorage.getItem('showCategoriesTable') === 'true') {
                showCategoriesTable();
                localStorage.removeItem('showCategoriesTable');
            }
        });
    </script>
}
